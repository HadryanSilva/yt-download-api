name: Deploy to OCI

on:
  push:
    branches:
      - master

jobs:
  build-job:
    name: Build job
    runs-on: ubuntu-latest
    environment: OCI

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permissions to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: |
          ./gradlew clean build -x test

      - name: Get Version Number
        run:
          echo "VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')" >> $GITHUB_ENV

      - name: Move JAR to app directory
        run: |
          mkdir -p app
          mv build/libs/*.jar app/

      - name: Publish Jar
        uses: actions/upload-artifact@v4
        with:
          name: 'yt-download-api-${{env.VERSION}}.jar'
          path: app/yt-download-api-${{env.VERSION}}.jar

      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "pass_phrase=${{secrets.OCI_PASSPHRASE}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
          echo "${{secrets.VM_SSH_PUB_KEY}}" >> /home/runner/.oci/id_vm.pub

      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL
          
      - name: Fix Config File Permissions
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem
          
      - name: Get Instance IP
        run: |
          INSTANCE_IP=$(oci compute instance list-vnics \
            --instance-id ${{ secrets.INSTANCE_OCID }} \
            --query 'data[0]."public-ip"' \
            --raw-output)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo "Instance IP: $INSTANCE_IP"
      - name: Wait for SSH
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
                  sleep 5
                  echo "SSH not available..."
          done; echo "SSH ready!"

      - name: Stop App
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{env.INSTANCE_IP}}
          username: ubuntu
          key: ${{secrets.VM_SSH_PRIVATE_KEY}}
          script: |
            pid=$(ps aux | grep "[y]t-download-api.jar" | awk '{print $2}')
            if [ -z "$pid" ]; then
              echo "Process not found. No need to stop."
            else
              echo "Stopping process with PID: $pid"
              kill -9 $pid
            fi

            sudo mkdir -p /app

      - name: Push JAR
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: app/yt-download-api-${{env.VERSION}}.jar
          target: /home/ubuntu/app/yt-download-api-${{env.VERSION}}.jar

      - name: Start App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            sudo mv ~/app/yt-download-api-${{env.VERSION}}.jar /app/yt-download-api.jar
            nohup java -jar /app/yt-download-api.jar > output.$(date --iso).log 2>&1 &

